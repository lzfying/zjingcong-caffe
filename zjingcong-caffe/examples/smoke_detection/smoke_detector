#!/usr/bin/env python
# -*- coding: utf-8 -*-

from classify_video import videoClassifier

from optparse import OptionParser
import pprint
import subprocess
import logging
import time
import os
import sys

scripttime = time.strftime("%Y-%m-%d-%H:%M", time.localtime())
start_time = time.time()
clip_length = 16


def init(video_name):
    logging.basicConfig(level=logging.DEBUG,
                        format='%(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filename='/home/zjc/log/smoke_detector_log/{name}-{time}.log'.format(name=video_name,
                                                                                             time=scripttime),
                        filemode='w')
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)

    logging.info("Log location: /home/zjc/log/smoke_detector_log/{name}-{time}.log".format(name=video_name,
                                                                                           time=scripttime))


class smoke_detector:
    def __init__(self, video_path, gpu_id, mode):
        self.video_path = video_path
        self.gpu_id = gpu_id
        self.mode = mode
        self.video_name = os.path.split(self.video_path)[1][: -4]
        self.tmp_folder = '/disk/zjingcong/tmp/smokeVideo/frame-{time}'.format(time=scripttime)

    def video_preprocess(self):
        # Video preprocess: extract video frames
        logging.info("=========================== VIDEO PRE PROCESSING ==============================")
        logging.info("Extract video frames from {0}...".format(self.video_path))
        command = ['/bin/bash', 'smokeVideo_extractor.sh', self.video_path, '30', self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

    def cleaner(self):
        # clean the tmp folder
        logging.info("=========================== TMP FILE CLEANER ==============================")
        command = ['rm', '-rf', self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)

    def video_classifiy(self):
        self.video_preprocess()

        logging.info("=========================== VIDEO CLASSIFICATION BEGIN ==============================")
        try:
            result = videoClassifier(os.path.join(self.tmp_folder, self.video_name), self.gpu_id, self.mode)
            if self.mode == 1:
                predictions_RGB_LRCN = result
                tmp_list = list(predictions_RGB_LRCN)
                result_list = map(lambda x: x.argmax(), tmp_list)

                print "Result of LSTM: "
                print result_list

            elif self.mode == 2:
                predictions_RGB_singleFrame = result
        except:
            logging.exception("Classify video clip from {0} EXCEPTION".format(self.tmp_folder))
            logging.info("Video clip {0} classification complete.".format(self.tmp_folder))

        logging.info("=========================== VIDEO CLASSIFICATION END ==============================")

        self.cleaner()

        end_time = time.time()
        print "Time Usage: ", end_time - start_time


def get_options():
    usage = "usage: %prog [options] ..."
    parser = OptionParser(usage=usage)

    parser.add_option('-v', '--video', action='store', dest='video', help='Path of the video that you wish to detect.')
    parser.add_option('-g', '--gpu', action='store', dest='gpu', default=0,
                      help='GPU device id. Default GPU device id is 0.')
    parser.add_option('-m', '--mode', action='store', dest='mode', default=1,
                      help='Select mode: 1 - LSTM only, 2 - singleFrame only. '
                           'The default mode is 1.')

    (options, args) = parser.parse_args()

    return options


def main():
    options = get_options()

    if options.video:
        init(options.video.split('/')[-1])
        smokeDetector = smoke_detector(options.video, int(options.gpu), options.mode)
        smokeDetector.video_classifiy()

    else:
        print "No video. Please use -v or --video to add video name and -h or --help for more details."

if __name__ == '__main__':
    main()
