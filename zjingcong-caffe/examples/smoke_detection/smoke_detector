#!/usr/bin/env python
# -*- coding: utf-8 -*-

from classify_video import videoClassifier
from videoPlayer import videoPlayer

from optparse import OptionParser
import pprint
import subprocess
import logging
import time
import os
import sys
import numpy as np
import glob
import matplotlib.pyplot as plt
import yaml

scripttime = time.strftime("%Y-%m-%d-%H:%M", time.localtime())
start_time = time.time()
clip_length = 16
offset = 24
frame_rate = 30
stride_length = 8   # stride_length = offset in LRCN_classify_video in classify_video
video_result_yaml_path = '/home/zjc/log/video_result_yaml'


def init(video_name):
    logging.basicConfig(level=logging.DEBUG,
                        format='%(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filename='/home/zjc/log/smoke_detector_log/{name}-{time}.log'.format(name=video_name,
                                                                                             time=scripttime),
                        filemode='w')
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)

    logging.info("Log location: /home/zjc/log/smoke_detector_log/{name}-{time}.log".format(name=video_name,
                                                                                           time=scripttime))


class smoke_detector:
    def __init__(self, video_path, gpu_id, mode, lstm_model):
        self.video_path = video_path
        self.gpu_id = gpu_id
        self.mode = mode
        self.lstm_model = lstm_model
        self.video_name = os.path.split(self.video_path)[1][: -4]
        self.tmp_folder = '/disk/zjingcong/tmp/smokeVideo/fps_{0}'.format(frame_rate)

    @staticmethod
    def _init_index_list(frame_num):
        index_list = []
        index = range(frame_num)
        for i in range(0, frame_num, stride_length):
            if (i + clip_length) < frame_num:
                index_list.extend(index[i: i + clip_length])
            else:
                index_list.extend(index[-clip_length:])

        return index_list

    @staticmethod
    def figure(result, p_smoke, p_no_smoke, video_name):
        result_figure = plt.figure(video_name)
        ax = result_figure.add_subplot(111)
        ax.plot(xrange(1, len(result) + 1), p_smoke, 'g', label='smoke probability')
        ax.plot(xrange(1, len(result) + 1), p_no_smoke, 'b', label='no smoke probability')
        ax.plot(xrange(1, len(result) + 1), result, 'r', label='classification')
        ax.legend(loc=9)
        ax.set_yticks([-0.5, 0, 0.5, 1, 1.5])

        ax.set_title(video_name)
        ax.set_xlabel('frame id')
        ax.set_ylabel('result')
        plt.savefig('/home/zjc/log/video_result_pic/{0}_result.jpg'.format(video_name))
        plt.show()

    def video_preprocess(self):
        # Video preprocess: extract video frames
        logging.info("=========================== VIDEO PRE PROCESSING ==============================")
        logging.info("Extract video frames from {0}...".format(self.video_path))
        command = ['/bin/bash', 'smokeVideo_extractor.sh', self.video_path, str(frame_rate), self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

    def cleaner(self):
        # clean the tmp folder
        logging.info("=========================== TMP FILE CLEANER ==============================")
        command = ['rm', '-rf', self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)

    def video_classifiy(self):
        self.video_preprocess()

        frame_num = len(glob.glob('%s/*.jpg' % os.path.join(self.tmp_folder, self.video_name)))

        logging.info("=========================== VIDEO CLASSIFICATION BEGIN ==============================")
        result_list = []
        classifier_result_list = []
        try:
            result = videoClassifier(os.path.join(self.tmp_folder, self.video_name),
                                     self.gpu_id, self.mode, self.lstm_model)[1]
            if self.mode == 1:
                predictions_RGB_LRCN = result
                tmp_list = list(predictions_RGB_LRCN)
                index_list = self._init_index_list(frame_num)

                for frame_id in xrange(frame_num):
                    frame_index_list = [i for i in xrange(len(index_list)) if index_list[i] == frame_id]
                    frame_predictions_array = np.array(map(lambda x: tmp_list[x], frame_index_list))
                    result_0 = np.mean(frame_predictions_array, 0)[0]
                    result_1 = np.mean(frame_predictions_array, 0)[1]
                    result_list.append((result_0, result_1))
                    classifier_result_list.append(np.mean(frame_predictions_array, 0).argmax())

                print "Result of LSTM: "
                print "No Smoke List: "
                print map(lambda x: x[0], result_list)
                print "Smoke List: "
                print map(lambda x: x[1], result_list)
                print "Classifier result of LSTM: "
                print classifier_result_list
                print "Total Frame Num: ", frame_num
                print "Smoke Frame Num: ", sum(classifier_result_list)
                print "Frame Rate: ", frame_rate, "fps"

                video_result = {'no_smoke': map(lambda x: x[0], result_list), 'smoke': map(lambda x: x[1], result_list),
                                'result': classifier_result_list, 'total_frame': frame_num,
                                'smoke_frame': sum(classifier_result_list)}

                with open(os.path.join(video_result_yaml_path, self.video_name) + '.yaml', 'w') as video_yaml:
                    video_yaml.write(str(video_result))

            elif self.mode == 2:
                predictions_RGB_singleFrame = result    # never used
        except:
            logging.exception("Classify video clip from {0} EXCEPTION".format(self.tmp_folder))
            logging.info("Video clip {0} classification complete.".format(self.tmp_folder))

        logging.info("=========================== VIDEO CLASSIFICATION END ==============================")

        # self.cleaner()

        end_time = time.time()
        print "Time Usage: ", end_time - start_time
        print "Model Used: ", self.lstm_model

        # play the video
        # videoPlayer(self.video_path, result_list)

        # figure function input: result, p_smoke, p_no_smoke, video_name
        self.figure(classifier_result_list,
                    map(lambda x: x[1], result_list),
                    map(lambda x: x[0], result_list),
                    self.video_name)


def get_options():
    usage = "usage: %prog [options] ..."
    parser = OptionParser()

    parser.add_option('-v', '--video', action='store', dest='video', help='Path of the video that you wish to detect.')
    parser.add_option('-g', '--gpu', action='store', dest='gpu', default=0,
                      help='GPU device id. Default GPU device id is 0.')
    parser.add_option('-m', '--mode', action='store', dest='mode', default=1,
                      help='Select mode: 1 - LSTM only, 2 - singleFrame only. '
                           'The default mode is 1.')
    parser.add_option('-l', '--lstm', action='store', dest='lstm', default='snapshots_lstm_RGB_iter_200.caffemodel',
                      help='Select the caffemodel used for lstm classification.')

    (options, args) = parser.parse_args()

    return options


def main():
    options = get_options()

    if options.video:
        init(options.video.split('/')[-1])
        smokeDetector = smoke_detector(options.video, int(options.gpu), options.mode, options.lstm)
        smokeDetector.video_classifiy()

    else:
        print "No video. Please use -v or --video to add video name and -h or --help for more details."

if __name__ == '__main__':
    main()
