#!/usr/bin/env python
# -*- coding: utf-8 -*-

from classify_video import videoClassifier

from optparse import OptionParser
import pprint
import subprocess
import logging
import time
import os
import sys
# import threading

scripttime = time.strftime("%Y-%m-%d-%H:%M", time.localtime())
clip_length = 32


def init():
    logging.basicConfig(level=logging.DEBUG,
                        format='%(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filename='/home/zjc/log/smoke_detector/tmp/{time}.log'.format(time=scripttime),
                        filemode='w'
                        )
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s')
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)

    logging.info("Log location: /home/zjc/log/smoke_detector/tmp/{time}.log".format(time=scripttime))


'''
class videoClassifyThread(threading.Thread):
    def __init__(self, thread_id, video_frame_path):
        self.thread_id = thread_id
        self.video_frame_path = video_frame_path
        super(videoClassifyThread, self).__init__()

    def run(self):
        logging.info("Thread {0} - Classify video clip from {1}...".format(self.thread_id, self.video_frame_path))
        try:
            class_RGB_LRCN = videoClassifier(self.video_frame_path)
        except:
            logging.exception("Thread {0} - Classify video clip from {1}".format(self.thread_id, self.video_frame_path))
            class_RGB_LRCN = -1
        if mutex.acquire():
            result_list[self.thread_id] = class_RGB_LRCN
            mutex.release()
'''


class smoke_detector:
    def __init__(self, video_path, gpu_id):
        self.video_path = video_path
        self.gpu_id = gpu_id
        self.tmp_folder = '/disk/zjingcong/tmp/smokeVideo/frame-{time}'.format(time=scripttime)
        self.video_name = os.path.split(self.video_path)[1][: -4]
        self.video_frame_path = os.path.join(self.tmp_folder, self.video_name)
        self.tmp_folder_list = []

    def _frame_clip(self, clip_id, frame_list):
        tmp_folder = os.path.join(self.tmp_folder, '{video}-clip_{id}'.format(video=self.video_name, id=clip_id))
        self.tmp_folder_list.append(tmp_folder)
        logging.info("Create tmp folder: {0}".format(tmp_folder))
        command = ['mkdir', '-m', '775', tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

        logging.info("Moving frames to tmp folder: {0}...".format(tmp_folder))
        for frame_path in frame_list:
            command = ['mv', frame_path, tmp_folder]
            p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = p.communicate()
            if err != '':
                logging.error(err)
                sys.exit(1)

    def video_preprocess(self):
        logging.info("=========================== VIDEO PRE PROCESSING BEGIN ==============================")
        logging.info("Extract video frames from {0}...".format(self.video_path))
        command = ['/bin/bash', 'smokeVideo_extractor.sh', self.video_path, '30', self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

        video_frame_list = []
        for path in os.walk(self.video_frame_path):
            if path[0] == self.video_frame_path:
                video_frame_list = path[2]
                video_frame_list = map(lambda x: os.path.join(self.video_frame_path, x), video_frame_list)
                break

        # order by frame_id
        video_frame_list.sort(key=lambda x: int(x.split('.')[1]))

        # clip the frames
        # ignore the last clip(if clip_num < clip_length)
        logging.info("Clip length: {0}".format(clip_length))
        frame_num = len(video_frame_list)
        clip_num = frame_num / clip_length
        for i in xrange(clip_num):
            frame_list = video_frame_list[i * clip_length: (i + 1) * clip_length]
            self._frame_clip(i, frame_list)

        # cleaner
        logging.info("Clean origin video frame path...")
        command = ['rm', '-rf', self.video_frame_path]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

        logging.info("=========================== VIDEO PRE PROCESSING END ==============================")

    def video_classifiy(self):
        self.video_preprocess()

        '''
        global result_list, mutex
        mutex = threading.Lock()
        result_list = []
        for i in xrange(len(self.tmp_folder_list)):
            result_list.append(None)

        for thread_id, tmp_folder in enumerate(self.tmp_folder_list):
            video_clip_classifier = videoClassifyThread(thread_id, tmp_folder)
            video_clip_classifier.start()

        while threading.activeCount() > 1:
            pass

        '''
        logging.info("=========================== VIDEO CLASSIFICATION BEGIN ==============================")
        result_list = []
        for tmp_folder in self.tmp_folder_list:
            try:
                class_RGB_LRCN = videoClassifier(tmp_folder, self.gpu_id)
            except:
                logging.exception(
                    "Classify video clip from {0}".format(tmp_folder))
                class_RGB_LRCN = -1
            result_list.append(class_RGB_LRCN)
            logging.info("Video clip {0} classification complete.".format(tmp_folder))

        # clean the tmp folder
        command = ['rm', '-rf', self.tmp_folder]
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if err != '':
            logging.error(err)
            sys.exit(1)

        logging.info("=========================== VIDEO CLASSIFICATION END ==============================")

        print result_list


def get_options():
    usage = "usage: %prog [options] ..."
    parser = OptionParser(usage=usage)

    parser.add_option('-v', '--video', action='store', dest='video', help='Path of the video that you wish to detect.')
    parser.add_option('-g', '--gpu', action='store', dest='gpu', default=0,
                      help='GPU device id. Default GPU device id is 0.')

    (options, args) = parser.parse_args()

    return options


def main():
    options = get_options()

    if options.video:
        smokeDetector = smoke_detector(options.video, int(options.gpu))
        smokeDetector.video_classifiy()

    else:
        print "No video. Please use -v or --video to add video name and -h or --help for more details."

if __name__ == '__main__':
    init()
    main()
